
# Weboob completion for Bash (automatically generated by tools/make_man.sh)
#
# vim: filetype=sh expandtab softtabstop=4 shiftwidth=4
#
# This file is part of woob.
#
# This script can be distributed under the same license as the
# woob or bash packages.

_woob_msg()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -t -c --backends cd --export-session --quiet --outfile --help export_all -b -I --select -E -d export_thread help -n --debug photos --condition --save-responses -s --version ls backends show --accept-empty -v -f --no-header --no-keys --formatter -h --nss -q --logging-file --exclude-backends --count list post profile status --verbose -e -a --auto-update --title"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_msg woob-msg

_woob_woob_cli()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help -b -I --select -d help -n --debug --condition --save-responses -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss -q --logging-file --count --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_woob_cli woob-cli

_woob_contentedit()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help -b -I --select -d help -n --debug --condition --save-responses edit -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss get -q --logging-file --count log --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_contentedit contentedit

_woob_geolocip()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help -b -I --select -d help -n --debug --condition --save-responses -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss -q --logging-file --count --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_geolocip geolocip

_woob_torrent()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help search -b -I --select -d help -n --debug info --condition --save-responses -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss -q --logging-file --count --verbose -e -a getfile --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_torrent torrent

_woob_subtitles()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help search -b -I --select -d help -n --debug info download --condition --save-responses -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss -q --logging-file --count --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_subtitles subtitles

_woob_money()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends budgea --export-session --quiet --outfile cd add_recipient --help -b -I --select -d --noimport advisor help -n --debug -P --condition transfer --save-responses -A -s --version ls --force --display backends --parallel -v -f --no-header --no-keys --formatter -D recipients -h --nss investment -q --logging-file --count coming -F list --account profile --verbose history pocket -e -a --auto-update -N --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_money money

_woob_dating()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -t -c --backends cd --export-session --quiet --outfile --help export_all -b -I --select -E -d export_thread help -n --debug photos --condition --save-responses -s --version ls backends show --accept-empty -v -f --no-header --no-keys --formatter events -h --nss -q --logging-file query --exclude-backends --count list post profile status --verbose -e -a --auto-update optim --title"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_dating dating

_woob_parcel()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help -b -I --select -d untrack help -n --debug info --condition --save-responses -s --version ls backends track -v -f --no-header --no-keys --formatter -h --nss -q --logging-file --count status --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_parcel parcel

_woob_job()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help search -b -I --select -d help -n --debug info --condition --save-responses -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss -q --logging-file --count --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_job job

_woob_boobathon()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile remtask members --help -b -I --select progress -d help -n --debug info --condition --save-responses close edit -s --version ls cancel done backends join -v tasks -f --no-header --no-keys --formatter start -h leave --nss addtask -q --logging-file --count --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_boobathon boobathon

_woob_travel()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --departure-time --help -b -I --select -d departures help -n --debug --condition --save-responses -s --version ls backends -v stations -f --no-header --no-keys --formatter -h --nss --arrival-time roadmap -q --logging-file --count --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_travel travel

_woob_pricecompare()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help -b -I --select -d help -n --debug info --condition --save-responses -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss -q --logging-file --count prices --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_pricecompare pricecompare

_woob_lyrics()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help search -b -I --select -d help -n --debug --condition --save-responses -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss get -q --logging-file --count --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_lyrics lyrics

_woob_woob_debug()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="--insecure --backends --export-session --quiet --help -b -I -d -B --debug --save-responses --bpython --version -v -h --nss -q --logging-file --verbose -e -a --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_woob_debug woob-debug

_woob_boobands()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O suggestions --insecure -c --backends cd --export-session --quiet --outfile --help search -b -I --select -d help -n --debug info --condition --save-responses -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss favorites albums -q --logging-file --count --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_boobands boobands

_woob_smtp()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile once --help -b -I --select -d help --smtpd -n --debug --condition --save-responses -s --version ls backends run -v -f --no-header --no-keys --formatter -h --nss -S -q --logging-file --count post --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_smtp smtp

_woob_gauge()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help search -b -I --select -d help -n --debug --condition --save-responses last_sensor_measure -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss -q --logging-file --count --verbose history -e -a details --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_gauge gauge

_woob_housing()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help search load -b -I --select -d help -n --debug info --condition --save-responses -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss -q --logging-file --count --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_housing housing

_woob_woob_repos()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile create --help -b -I --select -d help -n --debug --condition --save-responses -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss -q --logging-file build --count --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_woob_repos woob-repos

_woob_translate()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help -b -I --select -d help -n --debug --condition --save-responses -s --version ls translate backends -v -f --no-header --no-keys --formatter -h --nss -q --logging-file --count --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_translate translate

_woob_radio()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile playlist --help play search -b -I --select -d help -n --debug info download --condition --save-responses -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss -q --logging-file --count --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_radio radio

_woob_weather()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help -b -I --select -d help -n --debug --condition --save-responses -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss cities -q --logging-file --count forecasts --verbose -e -a --auto-update current --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_weather weather

_woob_shop()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help -b -I --select -d payments help -n --debug --condition --save-responses orders -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss -q --logging-file --count items --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_shop shop

_woob_woob_config()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help -b -I --select -d help -n --debug info --condition --save-responses edit -s --version ls backends -v -f --no-header --no-keys --formatter update add enable -h --nss register -q --logging-file --count disable list --verbose modules remove -e -a confirm --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_woob_config woob-config

_woob_video()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile playlist --help play search -b -I --select nsfw -d help -n --debug info download --condition --save-responses -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss -q --logging-file --count --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_video video

_woob_woob()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="--insecure --backends --export-session --quiet --help -b -I -d --debug --save-responses --version -v -h --nss -q --logging-file --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_woob woob

_woob_calendar()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help load search -b -I --select -d help -n --debug info --condition --save-responses export -s --version ls backends attends -v -f --no-header --no-keys --formatter -h --nss -q --logging-file --count list unattends --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_calendar calendar

_woob_recipes()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help search -b -I --select -d help -n --debug info --condition --save-responses export -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss -q --logging-file --count --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_recipes recipes

_woob_bill()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="subscriptions -O --insecure -c --backends cd --export-session --quiet --outfile --help -b -I --select -d help -n --debug download_pdf download --condition --save-responses documents bills -s --version ls backends -v -f --no-header --no-keys --formatter balance -h --nss -q --logging-file --count profile --verbose history -e -a details --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_bill bill

_woob_books()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help search -b -I --select -d help -n --debug --condition --save-responses -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss renew -q --logging-file --count --verbose rented -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_books books

_woob_paste()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-m -O --insecure -t -c --backends cd --export-session --quiet --max-age --outfile --help -b -I --select -E -d help -n --debug info --condition --save-responses -s --version ls get_bin backends post_bin -v -f --no-header --no-keys --formatter -h --nss get -q --logging-file --exclude-backends --count --encoding --public post --verbose -p -e -a --auto-update --title"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_paste paste

_woob_cinema()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="search_torrent -O --insecure -c --backends cd --export-session --quiet --outfile getfile_subtitle --help -b -I --select -d info_movie persons_in_common info_person help search_subtitle -n --debug --condition --save-responses info_torrent -s --version releases ls search_person backends search_movie_torrent -v info_subtitle filmography -f --no-header --no-keys --formatter search_movie movies_in_common -h --nss getfile_torrent -q --logging-file search_movie_subtitle --count casting --verbose biography -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_cinema cinema

_woob_bugtracker()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="--status -O --insecure -c --backends cd --export-session --quiet --outfile --help search -b -I --select --start -d help -n --debug --condition --save-responses edit attach -s --version ls backends -v comment -f --tracker --no-header --formatter --no-keys logtime -h --nss --category --author --due get -q --logging-file --priority --exclude-backends --count --assignee post --target-version --verbose remove -e -a --auto-update --title"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_bugtracker bugtracker

_woob_gallery()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends cd --export-session --quiet --outfile --help search -b -I --select -d help -n --debug info download --condition --save-responses -s --version ls backends -v -f --no-header --no-keys --formatter -h --nss -q --logging-file --count --verbose -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_gallery gallery

_woob_bank()
{
    local cur args

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    args="-O --insecure -c --backends budgea --export-session --quiet --outfile cd add_recipient --help -b -I --select -d advisor help -n --debug transfer --condition --save-responses -s --version ls backends -v -f --no-header --no-keys --formatter recipients -h --nss investment -q --logging-file --count coming list profile --verbose history pocket -e -a --auto-update --exclude-backends"

    COMPREPLY=( $(compgen -o default -W "${args}" -- "$cur" ) )
}
complete -F _woob_bank bank
